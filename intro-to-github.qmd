---
title: "Introduction to git and GitHub"
author: "Irena Papst"
format: 
  revealjs:
    auto-stretch: false
    self-contained: true
editor: visual
title-slide-attributes:
  data-background-image: figs/git-schema/Slide22.PNG
  data-background-size: contain
  data-background-opacity: "0.5"
---

This talk is available online here:

[https://papsti.github.io/talks/2023-08-23_intro-to-github.html](https://papsti.github.io/talks/2023-08-23_intro-to-github.html)

::: aside
It features clickable links for further reading or future reference.
:::

## Filename nightmares

<br> <br>

![](figs/filename-nightmare.PNG){fig-align="center" width="50%"}

## Previous version grief

![](figs/teams-chat.jpg){fig-align="center"}

## Collaboration pain

<br> <br>

![](figs/teams-chat2.jpg){fig-align="center"}

# Setting the scene

## The lingo

-   `git`: version control program

-   [GitHub](https://github.com/): an online service that enables you to share, backup, and collaborate on `git` repositories

-   Repository ("repo"): project folder

::: aside
More terms defined in the [GitHub glossary](https://docs.github.com/en/get-started/quickstart/github-glossary).
:::

## High-level overview

![](figs/git-schema/Slide1.PNG){fig-align="center"}

## Getting set up {background-color="white" background-image="./figs/git-schema/Slide2.PNG"}

1.  Register for a free GitHub account [here](https://github.com/signup)

::: aside
Here is some [useful username advice](https://happygitwithr.com/github-acct.html#username-advice) that you may want to follow.
:::

## Getting set up {background-color="white" background-image="./figs/git-schema/Slide3.PNG"}

2.  Install git followed by GitHub Desktop (both available in Service Gateway)
3.  [Configure git for GitHub Desktop](https://docs.github.com/en/desktop/installing-and-configuring-github-desktop/configuring-and-customizing-github-desktop/configuring-git-for-github-desktop)

::: aside
You can simply use git / GitHub from the command line, or use one of the [many other clients](https://happygitwithr.com/git-client.html#recommended-git-clients), but I think GitHub Desktop is great for beginner and even intermediate users.
:::

# Working alone {background-color="white" background-image="./figs/git-schema/Slide20.PNG"}

::: notes
There are many ways of working with git / GitHub, but this is a useful basic workflow that I suggest would be good to start with.
:::

------------------------------------------------------------------------

## Create a central remote repository on GitHub.com {background-color="white" background-image="./figs/git-schema/Slide2.PNG"}

::: r-stack
::: {.fragment .fade-in-then-out}
![](figs/create-repo.png){fig-align="center" width="80%"}
:::

::: {.fragment .fade-in-then-out}
![](figs/create-repo2.png){fig-align="center" width="80%"}
:::

::: {.fragment .fade-in}
![](figs/create-repo3.png){fig-align="center" width="80%"}
:::
:::

## Create a central remote repository on GitHub.com {background-color="white" background-image="./figs/git-schema/Slide2.PNG"}

![](figs/create-repo3.png){fig-align="center" width="60%"}

::: aside
You can also have an RMarkdown file generate your README with executed R code integrated within. In this case, leave the README option unchecked and see `usethis::use_readme_rmd()`.
:::

## Create a central remote repository on GitHub.com {background-color="white" background-image="./figs/git-schema/Slide2.PNG"}

::: r-stack
::: {.fragment .fade-out}
![](figs/create-repo4.png){fig-align="center" width="80%"}
:::

::: {.fragment .fade-in}
![](figs/create-repo5.png){fig-align="center" width="80%"}
:::
:::

## "Clone" a copy of the repo locally {background-color="white" background-image="./figs/git-schema/Slide2.PNG"}

::: r-stack
::: {.fragment .fade-out}
![](figs/clone-repo.png){fig-align="center" width="80%"}
:::

::: {.fragment .fade-in}
![](figs/clone-repo2.png){fig-align="center" width="80%"}
:::
:::

## "Clone" a copy of the repo locally {background-color="white" background-image="./figs/git-schema/Slide3.PNG"}

::: r-stack
::: {.fragment .fade-out}
![](figs/clone-repo3.png){fig-align="center" width="80%"}
:::

::: {.fragment .fade-out-then-in}
![](figs/clone-repo4.png){fig-align="center" width="80%"}
:::

::: {.fragment .fade-in}
![](figs/clone-repo5.png){fig-align="center" width="80%"}
:::
:::

## Add some content {background-color="white" background-image="./figs/git-schema/Slide3.PNG"}

![](figs/add-content.png){fig-align="center" width="90%"}

::: notes
Do we really want to track all of these files?

Not all files are created equal. Some files may be very important to track for your project, while tracking others may cause unnecessary headaches as you attempt to collaborate with others on your project.

Moreover, GitHub blocks files larger than 100 MB, and will give you a warning if you attempt to add or update a file that is larger than 50 MB. It's good to be mindful of file size when committing to avoid running into this issue.
:::

## Ignore unnecessary files {background-color="white" background-image="./figs/git-schema/Slide3.PNG"}

::: r-stack
::: {.fragment .fade-out}
Option 1: point and click in GitHub Desktop

![](figs/ignore.png){fig-align="center" width="80%"}
:::

::: {.fragment .fade-in}
Option 2: point and click in GitHub Desktop

![](figs/ignore2.png){fig-align="center" width="80%"}
:::
:::

## Ignore unnecessary files {background-color="white" background-image="./figs/git-schema/Slide3.PNG"}

Option 3: add patterns to the `.gitignore` file

::: r-stack
::: {.fragment .fade-out}
![](figs/ignore3.png){fig-align="center"}
:::

::: {.fragment .fade-in}
![](figs/ignore4.png){fig-align="center"}
:::
:::

## Ignore unnecessary files {.nostretch background-color="white" background-image="./figs/git-schema/Slide3.PNG"}

Option 3: add patterns to the `.gitignore` file

![](figs/ignore4.png){fig-align="center" width="34%"}

::: aside
You can read more about how `git` understands patterns in a `.gitignore` file [here](https://git-scm.com/docs/gitignore#_pattern_format).

Further reading on which files to commit: section 10 of [Excuse me, do you have a moment to talk about version control?](https://peerj.com/preprints/3159v2/) by Jenny Bryan
:::

## Ta-da! {background-color="white" background-image="./figs/git-schema/Slide3.PNG"}

::: r-stack
::: {.fragment .fade-out}
![](figs/add-content.png){fig-align="center" width="80%"}
:::

::: {.fragment .fade-in}
![](figs/ignore5.png){fig-align="center" width="80%"}
:::
:::

## Inspect changes using "diffs" {background-color="white" background-image="./figs/git-schema/Slide3.PNG"}

![](figs/diff.png){fig-align="center" width="65%"}

::: aside
Diffs allow us to quickly see what's changed in a file from the previous version.

[Red]{style="color: #b31d28"} = deletion, [green]{style="color: #23863a"} = addition.
:::

## Commit your changes {background-color="white" background-image="./figs/git-schema/Slide3.PNG"}

::: r-stack
::: {.fragment .fade-out}
![](figs/commit.png){fig-align="center" width="80%"}
:::

::: {.fragment .fade-in}
![](figs/commit2.png){fig-align="center" width="80%"}
:::
:::

## Push your changes {background-color="white" background-image="./figs/git-schema/Slide4.PNG"}

![](figs/push.png){fig-align="center" width="80%"}

## Push your changes {background-color="white" background-image="./figs/git-schema/Slide2.PNG"}

::: r-stack
::: {.fragment .fade-in-then-out}
![](figs/push2.png){fig-align="center" width="80%"}
:::

::: {.fragment .fade-in}
You can see the results of that push [here](https://github.com/papsti/intro-to-github-demo/commit/807277faed76571bdf7a996a9e26a2131bcd39aa).
:::
:::

::: notes
This workflow is good enough if you're just working on one machine, but if you're working across two machines or with others, you'll need a few more tools...
:::

# Working with others

![](figs/git-schema/Slide6.PNG){fig-align="center"}

## Inviting collaborators {background-color="white" background-image="./figs/git-schema/Slide7.PNG"}

::: r-stack
::: {.fragment .fade-out}
![](figs/invite.png){fig-align="center" width="80%"}
:::

::: {.fragment .fade-in-then-out}
![](figs/invite2.png){fig-align="center" width="80%"}
:::

::: {.fragment .fade-in-then-out}
![](figs/invite3.png){fig-align="center" width="80%"}
:::

::: {.fragment .fade-in}
![](figs/invite4.png){fig-align="center" width="80%"}
:::
:::

::: notes
Then they need to clone locally.
:::

## Pull from origin {background-color="white" background-image="./figs/git-schema/Slide11.PNG"}

![](figs/pull.png){fig-align="center" width="70%"}

::: aside
You want to start a work session with a pull to synchronize with changes others may have made in the meantime.
:::

## Pull from origin {background-color="white" background-image="./figs/git-schema/Slide11.PNG"}

::: r-stack
::: {.fragment .fade-out}
![](figs/pull2.png){fig-align="center" width="70%"}
:::

::: {.fragment .fade-in}
![](figs/pull3.png){fig-align="center" width="70%"}
:::
:::

## Branching

::: r-stack
::: {.fragment .fade-out}
![](figs/main.png){fig-align="center" width="80%"}
:::

::: {.fragment .fade-in-then-out}
![](figs/git-schema/Slide14.png){fig-align="center"}
:::

::: {.fragment .fade-in-then-out}
![](figs/git-schema/Slide15.png){fig-align="center"}
:::

::: {.fragment .fade-in-then-out}
![](figs/git-schema/Slide16.png){fig-align="center"}
:::

::: {.fragment .fade-in-then-out}
![](figs/git-schema/Slide17.png){fig-align="center"}
:::

::: {.fragment .fade-in-then-out}
![](figs/git-schema/Slide18.png){fig-align="center"}
:::

::: {.fragment .fade-in}
![](figs/git-schema/Slide19.png){fig-align="center"}
:::
:::

## Branching {background-color="white" background-image="./figs/git-schema/Slide8.PNG"}

::: r-stack
::: {.fragment .fade-out}
![](figs/branching.png){fig-align="center" width="80%"}
:::

::: {.fragment .fade-in-then-out}
![](figs/branching2.png){fig-align="center" width="80%"}
:::

::: {.fragment .fade-in}
![](figs/branching3.png){fig-align="center" width="80%"}
:::
:::

## Branching {background-color="white" background-image="./figs/git-schema/Slide7.PNG"}

![](figs/branching4.png){fig-align="center" width="70%"}

::: aside
Further reading on branches: section 11 of [Excuse me, do you have a moment to talk about version control?](https://peerj.com/preprints/3159v2/) by Jenny Bryan
:::

## Pull request {background-color="white" background-image="./figs/git-schema/Slide8.PNG"}

::: r-stack
::: {.fragment .fade-out}
![](figs/pull-request.png){fig-align="center" width="75%"}
:::

::: {.fragment .fade-in-then-out}
![](figs/pull-request2.png){fig-align="center" width="75%"}
:::

::: {.fragment .fade-in-then-out}
![](figs/pull-request3.png){fig-align="center" width="75%"}
:::

::: {.fragment .fade-in}
![](figs/pull-request4.png){fig-align="center" width="75%"}
:::
:::

## Pull request {background-color="white" background-image="./figs/git-schema/Slide7.PNG"}

::: r-stack
::: {.fragment .fade-out}
![](figs/pull-request5.png){fig-align="center" width="75%"}
:::

::: {.fragment .fade-in-then-out}
![](figs/pull-request6.png){fig-align="center" width="75%"}
:::

::: {.fragment .fade-in-then-out}
![](figs/pull-request7.png){fig-align="center" width="75%"}
:::

::: {.fragment .fade-in-then-out}
![](figs/pull-request8.png){fig-align="center" width="75%"}
:::

::: {.fragment .fade-in-then-out}
![](figs/pull-request9.png){fig-align="center" width="75%"}
:::

::: {.fragment .fade-in}
![](figs/pull-request10.png){fig-align="center" width="75%"}
:::
:::

## Pull request {background-color="white" background-image="./figs/git-schema/Slide8.PNG"}

::: r-stack
::: {.fragment .fade-in-then-out}
![](figs/delete-branch.png){fig-align="center" width="75%"}
:::

::: {.fragment .fade-in-then-out}
![](figs/delete-branch2.png){fig-align="center"}
:::
:::

## Merge conflicts

-   `git` is great at automatically consolidating sets of changes between versions
-   When it needs help, it creates a [**merge conflict**](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/about-merge-conflicts) to flag conflicting changes
    -   *e.g.* when two people make different change to the same part of the same file
-   Fear not!

## Merge conflicts {background-color="white" background-image="./figs/git-schema/Slide8.PNG"}

::: r-stack
::: {.fragment .fade-out}
![](figs/merge-conflict.png){fig-align="center" width="80%"}
:::

::: {.fragment .fade-in-then-out}
![](figs/merge-conflict2.png){fig-align="center" width="80%"}
:::

::: {.fragment .fade-in}
![](figs/merge-conflict3.png){fig-align="center" width="80%"}
:::
:::

## Merge conflicts {background-color="white" background-image="./figs/git-schema/Slide8.PNG"}

![](figs/merge-conflict4.png){fig-align="center" width="70%"}

::: aside
Occasionally you may get in too deep with a merge conflict, in which case it may be best to start fresh [by (safely) deleting your local version of a branch/repo and re-cloning it from the origin](https://happygitwithr.com/burn.html).
:::

# The rewards

## Managing version history

![](figs/filename-nightmare.PNG){fig-align="center"}

## Managing version history {background-color="white" background-image="./figs/git-schema/Slide7.PNG"}

::: r-stack
::: {.fragment .fade-out}
![](figs/file-history.png){fig-align="center" width="70%"}
:::

::: {.fragment .fade-in-then-out}
![](figs/file-history2.png){fig-align="center" width="70%"}
:::

::: {.fragment .fade-in-then-out}
![](figs/file-history3.png){fig-align="center" width="70%"}
:::

::: {.fragment .fade-in-then-out}
![](figs/file-history4.png){fig-align="center" width="70%"}
:::

::: {.fragment .fade-in}
![](figs/timeline.png){fig-align="center" width="70%"}
:::

::: {.fragment .fade-in}
![](figs/timeline2.png){fig-align="center" width="70%"}
:::

::: notes
Also useful for reporting to your collaborators or boss!
:::
:::

## Return to a previous version

::: r-stack
::: {.fragment .fade-out}
![](figs/teams-chat.jpg){fig-align="center"}
:::

::: {.fragment .fade-in}
![](figs/rollback.png){fig-align="center" width="70%"}
:::
:::

::: notes
This works best if you write descriptive commit messages...
:::

## Collaborate simultaneously

::: r-stack
::: {.fragment .fade-out}
![](figs/teams-chat2.jpg){fig-align="center"}
:::

::: {.fragment .fade-in}
![](figs/git-schema/Slide23.PNG){fig-align="center"}
:::
:::

## Project management with Github

::: notes
Here are some more rewards you didn't know you needed.
:::

::: fragment
-   [Issues](https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues), [Milestones](https://docs.github.com/en/issues/using-labels-and-milestones-to-track-work/about-milestones), [Projects](https://docs.github.com/en/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects)
:::

::: r-stack
::: {.fragment .fade-in-then-out}
Issue
:::

::: {.fragment .fade-in}
~~Issue~~ (Action) Item
:::
:::

::: {.fragment .fade-in}
-   For example: fixing a bug, implementing a new feature, documenting your work, writing a report, etc.
:::

::: {.fragment .fade-in}
-   Let's look at [an example](https://github.com/phac-nml-phrsd/ern/issues/144)...
:::

## "Code" reviews

::: incremental
-   Track changes-like editing/commenting for code and/or text
-   Let's look at [an example](https://github.com/phac-nml-phrsd/ern/pull/154)...
:::

# Summary of workflow

------------------------------------------------------------------------

::: r-stack
::: {.fragment .fade-out}
1.  Create a **remote repository** to house your project on GitHub.com.
2.  You and all collaborators should **clone** a copy of the repository locally to their own machine.
3.  Create a first, minimal version of your project code. **Commit** it to the `main` branch of your repository.
4.  Decide on a "feature" (analysis, plot, manuscript text chunk, etc.) that you want to create or edit. Create a **GitHub issue** associated with this action item.
5.  Create a **new branch** from the version of the code where you want to complete this task. The sole purpose of this branch is to address the issue.
:::

::: {.fragment .fade-in-then-out}
6.  **Commit** changes addressing this issue and **push** to remote every so often.
7.  Once you're satisfied that you've addressed the issue, push one final time, pull the latest version of `main` into your working branch, and then open a **pull request**. Use [keywords](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword#linking-a-pull-request-to-an-issue-using-a-keyword) in your pull request to close issues that have been addressed.
8.  Optionally solicit a **code review** from a collaborator.
9.  Once any code review and changes are complete, **merge** the pull request into the original branch from which you branched.
10. **Delete** the new feature branch.
:::

::: {.fragment .fade-in}
11. **Rinse and repeat** steps 4-8 until your project is done!
:::
:::

## Other resources

-   [Excuse me, do you have a moment to talk about version control?](https://peerj.com/preprints/3159v2/) by Jenny Bryan
    -   A journal article
    -   Great high-level overview
-   [Happy Git and GitHub for the useR](https://happygitwithr.com/index.html) by Jenny Bryan
    -   An online textbook
    -   Wonderful resource, though mostly command-line focused

::: aside
Much of this talk was inspired by these two resources!
:::

## Thanks!

### Github

[\@papsti](https://github.com/papsti)

[\@phac-nml-phrsd](https://github.com/phac-nml-phrsd)

### Email

[irena.papst\@phac-aspc.gc.ca](irena.papst@phac-aspc.gc.ca)
